<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="recording" default="false"/>
  <arg name="teleop" default="false"/>
  <arg name="test" default="true"/>


  <!-- <arg name="world" default=""/> -->
  <arg name="model" default="$(find unodopo_description)/urdf/unodopo.urdf"/>

  <arg name="rvizconfig" default="$(find unodopo_description)/rviz/laser_config.rviz"/>

  <!-- Gazebo empty world launch file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- <arg name="world_name" value="$(arg world)"/>  -->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="recording" value="$(arg recording)"/>
    
  </include>

  <!-- Robot Description from URDF -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(arg model)'" />


  <!-- Nodes-->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-z 1.0 -unpause -urdf -model robot -param robot_description" respawn="false" output="screen" />

  <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />

  </node>

  <node if="$(arg test)" name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />
  <node unless="$(arg test)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

  <node if="$(arg teleop)" name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen"/>

  <!-- <node name="cartographer_node" pkg="cartographer_ros"
      type="cartographer_node" args="
          -configuration_directory $(find unodopo)/cartographer_ros/configuration_files
          -configuration_basename racer_2d.lua"
      output="screen">
    <remap from="scan" to="/scan_sim" />
    <remap from="imu" to="/imu/data" /> 
    <remap from="odom" to="/odometry/filtered" /> 
    <remap from="points2" to="/os1_cloud_node/points" /> 
  </node>

  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
      type="cartographer_occupancy_grid_node" args="-resolution 0.05" /> -->


<?ignore
  <arg name="hostname" default="192.168.0.1"/>
  <arg name="cloud_topic" default="cloud"/>
  <arg name="frame_id" default="cloud"/>
  <node name="sick_tim_5xx" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
      <!-- <param name="robot_description" command="$(find xacro)/xacro.py '$(find unodopo)/urdf/accessories/sick_scan.urdf.xacro'" /> -->
      <param name="scanner_type" type="string" value="sick_tim_5xx"/>
      <!-- -135° -->
      <param name="min_ang" type="double" value="-2.35619449"/>
      <!-- 135° -->
      <param name="max_ang" type="double" value="2.35619449"/>
      <param name="use_binary_protocol" type="bool" value="true"/>
      <param name="range_max" type="double" value="100.0"/>
      <param name="intensity" type="bool" value="True"/>
      <param name="hostname" type="string" value="$(arg hostname)"/>
      <param name="cloud_topic" type="string" value="$(arg cloud_topic)"/>
      <param name="frame_id" type="str" value="$(arg frame_id)"/>
      <param name="port" type="string" value="2112"/>
      <param name="timelimit" type="int" value="5"/>
      <param name="sw_pll_only_publish" type="bool" value="true"/>
      <param name="min_intensity" type="double" value="0.0"/> <!-- Set range of LaserScan messages to infinity, if intensity < min_intensity (default: 0) -->
  </node>
?>

</launch>
